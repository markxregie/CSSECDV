| Security Issue                          | Java File Name          | Possible Vulnerabilities if Not Addressed                                  | Solution to be Implemented                                                                                   |
|---------------------------------------|------------------------|---------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|
| Password storage in plain text         | SQLite.java, User.java | Password theft if DB compromised, user accounts easily compromised         | Use strong hashing algorithm (BCrypt) to hash passwords before storing in DB (implemented in Frame.java)     |
| Weak password complexity enforcement   | Frame.java             | Easy to guess or brute force passwords, account compromise                 | Enforce password complexity rules: length, uppercase, lowercase, digit, special character (implemented)      |
| Lack of account lockout on failed logins| Login.java, SQLite.java| Brute force attacks to guess passwords                                     | Implement progressive account lockout after multiple failed attempts with lockout duration (implemented)     |
| SQL Injection vulnerabilities          | SQLite.java            | Attackers can manipulate SQL queries to access or modify data              | Use prepared statements for all SQL queries to prevent injection (partially implemented, needs review)       |
| Unverified user accounts                | Register.java, Frame.java, VerifyDialog.java | Unverified accounts can be used maliciously or spam system                 | Use email verification with unique token; require verification before activating account (implemented)       |
| Insecure password reset process         | ForgotPassword.java, ResetPassword.java, Frame.java, SQLite.java | Unauthorized password resets, token reuse or expiry bypass                 | Use secure random tokens with expiry; validate tokens; require token for reset; hash new password (implemented)|
| Password reset token leakage            | Frame.java             | Attackers can reset passwords without authorization                        | Use secure token generation (UUID), send via email, expire tokens after 1 hour (implemented)                 |
| Password reset token reuse or expiry bypass | SQLite.java, Frame.java | Unauthorized password reset                                                | Validate token expiry before allowing reset; clear token after use (implemented)                             |
| Lack of email format validation         | Register.java, Frame.java, ForgotPassword.java | Invalid or malicious email input                                          | Validate email format with regex before processing (implemented)                                             |
| Password confirmation mismatch          | Register.java, Frame.java, ResetPassword.java | User frustration, weak password acceptance                                 | Validate password and confirmation match before processing (implemented)                                     |
| Password visibility toggle UI           | Login.java, Register.java, ResetPassword.java | Shoulder surfing risk                                                      | Provide option to toggle password visibility (implemented)                                                  |
| Lack of logging for security events     | SQLite.java (logs table) | No audit trail for security incidents                                     | Implement logging of security events (not fully detailed in code, potential improvement)                      |

This documentation summarizes the key authentication and security practices in the project, highlighting potential vulnerabilities and the implemented solutions in the respective Java files.
